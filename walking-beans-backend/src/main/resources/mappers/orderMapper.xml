<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="walking_beans.walking_beans_backend.mapper.OrderMapper">
    <!-- **************************************** LEO **************************************** -->
    <!-- 주문 정보 가져오기 by orderId -->
    <select id="getOrderByOrderId">
        SELECT *
        FROM orders
        WHERE order_id = #{orderId}
    </select>

    <!-- untaken 된 주문들 조회 -->
    <select id="getOrdersByNullOfRiderIdInDuty">
        SELECT *
        FROM orders
        WHERE rider_id_on_duty IS NULL
    </select>

    <!-- rider_id_on_duty 로 주문 내역들 가져오기-->
    <select id="getOrdersByRiderIdOnDuty">
        SELECT order_id,
               user_id,
               store_id,
               address_id,
               order_number,
               order_status,
               order_requests,
               order_total_price,
               DATE_FORMAT(order_create_date, '%Y-%m-%d %W %p %h:%i')   AS order_create_date,
               DATE_FORMAT(order_modified_date, '%Y-%m-%d %W %p %h:%i') AS order_modified_date
        FROM orders
        WHERE rider_id_on_duty = #{riderIdOnDuty}
        ORDER BY order_id DESC
    </select>

    <!-- 주문 상태 변경 -->
    <update id="updateOrderStatus">
        UPDATE orders
        SET order_status = #{orderStatus}
        WHERE order_id = #{orderId}
    </update>

    <!-- 라이더가 take 시 다른 라이더들이 가져가지 못하도록 설정 변경 -->
    <update id="updateRiderIdOnDutyOfOrders">
        UPDATE orders
        SET rider_id_on_duty = #{riderId}
        WHERE order_id = #{orderId}
    </update>

    <!-- ****************************************  **************************************** -->

    <!--
 주문 상세 내역 : 상세 내역  가져오기 && 주문하기 : 유저 주소 및 메뉴 정보 가져오기
    <select id="selectOrderDetailByOrderId">
        SELECT Stores.store_id,
               Stores.store_name,
               Orders.order_number,
               Orders.order_id,
               Orders.order_total_price,
               Orders.order_requests,
               Orders.order_create_date,
               Carts.option_id,
               Carts.cart_quantity,
               Address.address,
               Users.user_phone,
               Menu.menu_name
        FROM Orders
                 JOIN Stores ON Orders.store_id = Stores.store_id
                 JOIN Carts ON Orders.order_id = Carts.order_id
                 JOIN Address ON Orders.address_id = Address.address_id
                 JOIN Users ON Orders.user_id = Users.user_id
                 JOIN Menuoption ON Carts.option_id = Menuoption.option_id
                 JOIN Menu ON Menuoption.menu_id = Menu.menu_id
        WHERE Orders.order_id = #{orderId}
    </select>

  주문 내역 : 유저 주문 내역 리스트 가져오기
    <select id="selectOrderByUserId" resultType="Orders">
        SELECT Orders.order_id,
               Orders.order_status,
               Orders.order_create_date,
               Orders.order_total_price,
               Stores.store_picture_url,
               Stores.store_name,
               Carts.cart_quantity,
               Menu.menu_name
        FROM Orders
                 JOIN Stores ON Orders.store_id = Stores.store_id
                 JOIN Carts ON Orders.order_id = Carts.order_id
                 JOIN Menu ON Menu.menu_id = MenuOption.menu_id
                 JOIN Users ON Orders.user_id = Users.user_id
        WHERE Users.user_id = #{userId}
    </select>
-->
    <!-- 주문 & 장바구니 데이터 저장 주문 상태 0으로 설정 수정 예정(메뉴 옵션 추가) -->
    <insert id="insertOrder" useGeneratedKeys="true" keyProperty="orderId">
        INSERT INTO orders (user_id, store_id, address_id, order_status, order_requests, order_total_price,
                            order_create_date, order_modified_date)
        VALUES (#{userId}, #{storeId}, #{addressId}, 0, #{orderRequests}, #{orderTotalPrice}, NOW(), NOW());
    </insert>


    <!-- 장바구니 내 주문하기 클릭 시 주문 중으로 상태 업데이트-->
    <update id="updateOrderStatusToCart">
        UPDATE orders
        SET order_status = 1, <!-- 주문 중 -->
        order_modified_date = NOW()
        WHERE order_id = #{orderId}
    </update>

    <!-- 주문 완료 데이터 저장 (주문 상태는 2로 설정, 결제정보 함께 저장) -->
    <update id="updateOrderInfo">
        UPDATE orders
        SET address_id        = #{addressId},
            order_status      = 2,
            order_requests    = #{orderRequests},
            order_total_price = #{order_total_price},
            order_modified_date = NOW()
        WHERE order_id = #{orderId}
    </update>

    <!-- 주문정보 가져오기 -->
    <select id="findOrderById">
        SELECT *
        FROM orders
        WHERE order_id = #{orderId}
    </select>

    <!-- 주문자 정보 가져오기 -->
    <select id="findOrdersByUserId">
        SELECT user_id, store_id, address_id, order_number, order_status, order_requests, order_total_price
        FROM orders
        WHERE user_id = #{userId}
    </select>

    <!-- 주문내역, 주문상세 내역 : 주문한 가게 정보 가져오기 -->
    <select id="findStoreByOrderId">
        SELECT s.store_id, s.store_name
        FROM stores s
        WHERE s.store_id = (SELECT o.store_id
                            FROM orders o
                            WHERE o.order_id = #{orderId})
    </select>

    <!-- 주문내역 : 오더 정보 가져오기 -->
    <select id="getOrderStatus">
        SELECT DATE_FORMAT(order_create_date, '%Y-%m-%d %W %p %h:%i') AS order_create_date,
               order_status,
               order_total_price,
               order_Requests
        FROM orders
        WHERE order_id = #{orderId}
    </select>
</mapper>