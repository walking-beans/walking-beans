<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="walking_beans.walking_beans_backend.mapper.OrderMapper">
    <!-- **************************************** LEO **************************************** -->
    <!-- 주문 정보 가져오기 by orderId -->
    <select id="getOrderByOrderId">
        SELECT *
        FROM orders
        WHERE order_id = #{orderId}
    </select>

    <!-- untaken 된 주문들 조회 -->
    <select id="getOrdersByNullOfRiderIdInDuty">
        SELECT *
        FROM orders
        WHERE rider_id_on_duty IS NULL
    </select>

    <!-- rider_id_on_duty 로 주문 내역들 가져오기-->
    <select id="getOrdersByRiderIdOnDuty">
        SELECT order_id,
               user_id,
               store_id,
               address_id,
               order_number,
               order_status,
               order_requests,
               order_total_price,
               DATE_FORMAT(order_create_date, '%Y-%m-%d %W %p %h:%i')   AS order_create_date,
               DATE_FORMAT(order_modified_date, '%Y-%m-%d %W %p %h:%i') AS order_modified_date,
               rider_id_on_duty
        FROM orders
        WHERE rider_id_on_duty = #{riderIdOnDuty}
        ORDER BY order_status, order_modified_date DESC
    </select>

    <!-- 주문 상태 변경 -->
    <update id="updateOrderStatus">
        UPDATE orders
        SET order_status = #{orderStatus}
        WHERE order_id = #{orderId}
    </update>

    <!-- 라이더가 take 시 다른 라이더들이 가져가지 못하도록 설정 변경 -->
    <update id="updateRiderIdOnDutyOfOrders">
        UPDATE orders
        SET rider_id_on_duty = #{riderId}
        WHERE order_id = #{orderId}
    </update>

    <select id="getOrderStatusWithRemainingTime">
        SELECT O.order_status, O.order_modified_date, S.store_max_delivery_time
        FROM orders O
                 INNER JOIN stores S
                            on O.store_id = S.store_id
        WHERE O.order_id = #{orderId}
    </select>

    <!-- ****************************************  **************************************** -->


    <insert id="createOrder" useGeneratedKeys="true" keyProperty="orderId">
        INSERT INTO orders (user_id, store_id, address_id, order_number, order_status, order_requests, order_total_price,
                            order_create_date, order_modified_date)
        VALUES (#{userId}, #{storeId}, #{addressId}, #{orderNumber}, 2, #{orderRequests}, #{orderTotalPrice}, NOW(),
                NOW());
    </insert>

    <insert id="insertOrderItem">
        INSERT INTO order_items (order_number, menu_id, option_id, quantity)
        VALUES (#{orderNumber}, #{menuId}, #{optionId}, #{quantity});
    </insert>

    <!-- 주문정보 가져오기 -->
    <select id="findOrderById">
        SELECT *
        FROM orders
        WHERE order_id = #{orderId}
    </select>

    <!-- 주문자 정보 가져오기 -->
    <select id="findOrdersByUserId">
        SELECT user_id, store_id, address_id, order_number, order_status, order_requests, order_total_price
        FROM orders
        WHERE user_id = #{userId}
    </select>

    <!-- 주문내역, 주문상세 내역 : 주문한 가게 정보 가져오기 -->
    <select id="findStoreByOrderId">
        SELECT s.store_id,
               s.store_name,
               s.store_picture_url,
               s.store_main_menu,
               s.store_address,
               s.store_latitude,
               s.store_longitude
        FROM stores s
        WHERE s.store_id = (SELECT o.store_id
                            FROM orders o
                            WHERE o.order_id = #{orderId})
    </select>

    <!-- 주문내역 : 오더 정보 가져오기 -->
    <select id="getOrderStatus">
        SELECT DATE_FORMAT(order_create_date, '%Y-%m-%d %W %p %h:%i') AS order_create_date,
               order_status,
               order_total_price,
               order_Requests
        FROM orders
        WHERE order_id = #{orderId}
    </select>

    <!-- 유저의 기존 주문 내역리스트들 -->
    <select id="getOrdersByUserId">
        SELECT user_id,
               customer_name,
               store_name,
               order_date,
               order_number,
               delivery_address,
               total_payment,
               order_requests,
               order_list,
               quantity,
               order_status,
               store_logo,
               store_id
        FROM user_orders_view
        WHERE user_id = #{userId}
    </select>

    <!-- 주문 내역 조회 -->
    <select id="getOrderByOrderNumber">
        SELECT order_id,
               user_id,
               customer_name,
               store_name,
               order_date,
               order_number,
               delivery_address,
               total_payment,
               order_requests,
               order_list,
               quantity
        FROM user_orders_view
        WHERE order_number = #{orderNumber}
    </select>
</mapper>