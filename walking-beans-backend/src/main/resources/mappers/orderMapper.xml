<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="walking_beans.walking_beans_backend.mapper.OrderMapper">
    <!-- 배달 현황: 주문상태 가져오기 -->
    <select id="selectStatusByOrderId">
        SELECT order_status
        FROM Orders
        WHERE order_id = #{orderId}
    </select>

    <!-- 배달 현황: 매장정보 가져오기 -->
    <select id="selectOrdersByStoreId" resultType="map" parameterType="int">
        SELECT Stores.store_id,
               Stores.store_name,
               Orders.order_number,
               Orders.order_total_price,
               Carts.option_id,
        FROM Orders
                 JOIN Stores ON Orders.store_id = Stores.store_id
                 JOIN Carts ON Orders.order_id = Carts.order_id
        WHERE Stores.store_id = #{storeId}
        GROUP BY Stores.store_id, Stores.store_name, Orders.order_number, Orders.order_total_price, Carts.option_id;
    </select>

    <!-- 주문 정보 가져오기 by orderId -->
    <select id="getOrderByOrderId">
        SELECT *
        FROM orders
        WHERE order_id = #{orderId}
    </select>

    <!-- untaken 된 주문들 조회 -->
    <select id="getOrdersByNullOfRiderIdInDuty">
        SELECT *
        FROM orders
        WHERE rider_id_on_duty IS NULL
    </select>

    <!-- 라이더가 take 시 다른 라이더들이 가져가지 못하도록 설정 변경 -->
    <update id="updateRiderIdOnDutyOfOrders">
        UPDATE orders
        SET rider_id_on_duty = #{riderId}
        WHERE order_id = #{orderId};
    </update>

    <!-- 주문 상세 내역 : 상세 내역 가져오기 && 주문하기 : 유저 주소 및 메뉴 정보 가져오기 -->
    <select id="selectOrderByStoreId">
        SELECT Stores.store_id,
               Stores.store_name,
               Orders.order_number,
               Orders.order_total_price,
               Orders.order_requests,
               Orders.order_date,
               Carts.option_id,
               Carts.cart_quantity,
               Address.address,
               Users.user_phone,
               Menu.menu_name
        FROM Orders
                 JOIN Stores ON Orders.store_id = Stores.store_id
                 JOIN Carts ON Orders.order_id = Carts.order_id
                 JOIN Address ON Orders.address_id = Address.address_id
                 JOIN Users ON Orders.user_id = Users.user_id
                 JOIN Menu ON Carts.menu_id = Menu.menu_id
        WHERE Stores.store_id = #{storeId}
    </select>

    <!-- 주문 내역 : 유저 주문 내역 리스트 가져오기 -->
    <select id="selectOrderByUserId">
        SELECT Orders.order_status,
               Orders.order_create_date,
               Orders.order_total_price,
               Stores.store_picture_url,
               Stores.store_name,
               Carts.cart_quantity,
               Menu.menu_name
        FROM Orders
                 JOIN Stores ON Orders.store_id = Stores.store_id
                 JOIN Carts ON Orders.order_id = Carts.order_id
                 JOIN Menu ON Carts.menu_id = Menu.menu_id
                 JOIN Users ON Orders.user_id = Users.user_id
        WHERE Users.user_id = #{userId}
    </select>

    <!-- 주문하기 : 주문 등록하기 insertOrder && insertCart-->
    <insert id="insertOrder" useGeneratedKeys="true" keyProperty="orderId">
        INSERT INTO Orders (order_total_price,
                            order_requests,
                            user_id,
                            store_id,
                            address_id)
        VALUES (#{orderTotalPrice}, #{orderRequests}, #{userId}, #{storeId}, #{addressId})
    </insert>
    <insert id="insertCart">
        INSERT INTO Carts (order_id, -- 위에서 삽입된 주문의 ID
                           menu_id,
                           cart_quantity,
                           option_id)
        VALUES (#{orderId}, -- insertOrder에서 얻은 orderId
                #{menuId},
                #{cartQuantity},
                #{optionId})
    </insert>

</mapper>